# -*- coding: utf-8 -*-
"""Arbol_de_desicion.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1d-Eg317tNENL_spzFkosFsAADiZuiywj
"""

import pandas as pd #Libreria a utilizar

#Cargamos nuestro dataset y mostramos las 10 primeras lineas
df = pd.read_csv('healthcare-dataset-stroke-data.csv')
df.sample(10)

#Convertimos las variables de string a numeros
df = pd.get_dummies(data=df, drop_first=True)

#Mostramos informacion de los datos
df.info()

# Llena los valores faltantes con la media de la columna
df.fillna(df.mean(), inplace=True)

"""# Seleccion de variables"""

#Seleccionamos nuestras variables explicativa y nuestra variable objetivo
explicativas = df.drop(columns = 'stroke')
objetivo = df.stroke

"""# Entrenar el modelo"""

#Se importan las librerias par la creacion de nuestro modelo y luego el entrenamiento
from sklearn.tree import DecisionTreeClassifier
model = DecisionTreeClassifier( max_depth = 20 )
model.fit( X = explicativas, y = objetivo)

"""# Vizualizamos modelo de arbol de desicion

"""

#Importamos algunas librerias que utilizaremos para la visualizacion de neustro modelo
from sklearn.tree import plot_tree
import matplotlib.pyplot as plt



#Entrenamos nuestro modelo y mostramos los diferentes camino que recorrio al momento del entrenamiento
plt.figure( figsize = (20, 10))
plot_tree( decision_tree = model, feature_names = explicativas.columns, filled = True, fontsize = 5);



#Algunas librerias para poder exportar nuestro arbol en formato png
from io import StringIO
import pydotplus
import matplotlib.image as mpimg
from sklearn import tree

#Creamo la imagen de nuestro arbol y lo guardamos
out = StringIO()
tree.export_graphviz(model, out_file = out)

graph = pydotplus.graph_from_dot_data(out.getvalue())
graph.write_png('strokes.png')

"""# Calculo de prediccion"""

#Tomamos nuestro una fila para hacer la prueba
a = explicativas.sample()
a

#mandamos nuestros datos de prueba al modelo para que ralize la predccion correspondiente
model.predict_proba(a)

y_pred = model.predict(explicativas)

"""# Interpretamos el modelo"""

import seaborn as sns

print(df.columns)

sns.histplot( x = df.hypertension, hue = df.stroke)

#Realizamos pruebas con las 10 primeras filas para ver la presicion de nuestro modelo
df['pred'] = y_pred
df.sample(10)[['stroke', 'pred']]

#Obtenemos el porcenteje de precicion de nuestro modelo
(df['stroke'] == df['pred']).mean()

!python --version